/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kot.coroutine
import kotlinx.coroutines.*

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}


// print hello after 10 seconds
suspend fun launchHello(){
    delay(10000)
    println("Launcing First Fucntion Call Hello")
}


// print hello after 5 seconds
suspend fun launchAnotherHello(){
    delay(5000)
    println("Launching Third Function Call Hello")
}


 suspend fun asyncHello(){
    delay(8000)
    println("Async Fucntion Call Hello")
}


fun main(args: Array<String>) {

    // Running coroutine by blocking main thread so program don't exit without completing coroutine tasks

    runBlocking{
        
        // Coroutine builder (Launching Coroutine)
        launch{
        
            println("Inside Coroutine")

            // Simple suspend function call (result after 10 seconds)
            val firstHello = launchHello()
            
            // This will not execute until launchHello() return (will execute after 10 sec)
            val secondHello = async{ asyncHello() }
           
            // This will execute immediatly without waiting for asyncHello to return something since asyncHello will run parallely
            // This will be print before asyncHello because the delay time is less than asyncHello
            val thirdHello = launchAnotherHello()

    }
}
}




/*
Output
Inside Coroutine 
Launching First Line Hello
Launching Another hello Third Line
Async Hello

*/
